
SSD1306.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000078e  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  00000830  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000184c  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cd  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a11  00000000  00000000  00002bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  000035c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  000039a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001726  00000000  00000000  00003edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 80 01 	jmp	0x300	; 0x300 <__ctors_end>
   4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
   8:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
   c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  10:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  14:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  18:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  1c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  20:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  24:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  28:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  2c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  30:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  34:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  38:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  3c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  40:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  44:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  48:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  4c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  50:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  54:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  58:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  5c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  60:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
  64:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	ae d5       	rcall	.+2908   	; 0xbc6 <__stack+0x2c7>
  6a:	80 a8       	ldd	r8, Z+48	; 0x30
  6c:	1f d3       	rcall	.+1598   	; 0x6ac <plot_bin+0x86>
  6e:	00 40       	sbci	r16, 0x00	; 0
  70:	8d 14       	cp	r8, r13
  72:	20 01       	movw	r4, r0
  74:	a1 c8       	rjmp	.-3774   	; 0xfffff1b8 <__eeprom_end+0xff7ef1b8>
  76:	da 02       	muls	r29, r26
  78:	81 8f       	std	Z+25, r24	; 0x19
  7a:	d9 f1       	breq	.+118    	; 0xf2 <font+0x72>
  7c:	db 40       	sbci	r29, 0x0B	; 11
  7e:	a6 af       	std	Z+62, r26	; 0x3e

00000080 <font>:
  80:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
  90:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
  a0:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
  b0:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
  c0:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
  d0:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
  e0:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
  f0:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
 100:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
 110:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
 120:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
 130:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
 140:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
 150:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
 160:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
 170:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
 180:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
 190:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
 1a0:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
 1b0:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
 1c0:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
 1d0:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
 1e0:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
 1f0:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 200:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 210:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
 220:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
 230:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
 240:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
 250:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
 260:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
 270:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
 280:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
 290:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
 2a0:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
 2b0:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
 2c0:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
 2d0:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
 2e0:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
 2f0:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<

00000300 <__ctors_end>:
 300:	11 24       	eor	r1, r1
 302:	1f be       	out	0x3f, r1	; 63
 304:	cf ef       	ldi	r28, 0xFF	; 255
 306:	d8 e0       	ldi	r29, 0x08	; 8
 308:	de bf       	out	0x3e, r29	; 62
 30a:	cd bf       	out	0x3d, r28	; 61

0000030c <__do_copy_data>:
 30c:	11 e0       	ldi	r17, 0x01	; 1
 30e:	a0 e0       	ldi	r26, 0x00	; 0
 310:	b1 e0       	ldi	r27, 0x01	; 1
 312:	ee e8       	ldi	r30, 0x8E	; 142
 314:	f7 e0       	ldi	r31, 0x07	; 7
 316:	02 c0       	rjmp	.+4      	; 0x31c <__do_copy_data+0x10>
 318:	05 90       	lpm	r0, Z+
 31a:	0d 92       	st	X+, r0
 31c:	ae 30       	cpi	r26, 0x0E	; 14
 31e:	b1 07       	cpc	r27, r17
 320:	d9 f7       	brne	.-10     	; 0x318 <__do_copy_data+0xc>

00000322 <__do_clear_bss>:
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	ae e0       	ldi	r26, 0x0E	; 14
 326:	b1 e0       	ldi	r27, 0x01	; 1
 328:	01 c0       	rjmp	.+2      	; 0x32c <.do_clear_bss_start>

0000032a <.do_clear_bss_loop>:
 32a:	1d 92       	st	X+, r1

0000032c <.do_clear_bss_start>:
 32c:	a1 31       	cpi	r26, 0x11	; 17
 32e:	b2 07       	cpc	r27, r18
 330:	e1 f7       	brne	.-8      	; 0x32a <.do_clear_bss_loop>
 332:	0e 94 aa 03 	call	0x754	; 0x754 <main>
 336:	0c 94 c5 03 	jmp	0x78a	; 0x78a <_exit>

0000033a <__bad_interrupt>:
 33a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033e <plot_char_normal>:
			}
		}
		
		column += (CHAR_WIDTH << scale);
	}
}
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	08 2f       	mov	r16, r24
 348:	c6 2f       	mov	r28, r22
 34a:	d4 2f       	mov	r29, r20
 34c:	88 e7       	ldi	r24, 0x78	; 120
 34e:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_start>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 358:	81 e2       	ldi	r24, 0x21	; 33
 35a:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 35e:	8d 2f       	mov	r24, r29
 360:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 364:	85 e0       	ldi	r24, 0x05	; 5
 366:	8d 0f       	add	r24, r29
 368:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 36c:	82 e2       	ldi	r24, 0x22	; 34
 36e:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 378:	8c 2f       	mov	r24, r28
 37a:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 37e:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_stop>
 382:	88 e7       	ldi	r24, 0x78	; 120
 384:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_start>
 388:	80 e4       	ldi	r24, 0x40	; 64
 38a:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 38e:	80 2f       	mov	r24, r16
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	8c 01       	movw	r16, r24
 394:	00 0f       	add	r16, r16
 396:	11 1f       	adc	r17, r17
 398:	00 0f       	add	r16, r16
 39a:	11 1f       	adc	r17, r17
 39c:	08 0f       	add	r16, r24
 39e:	19 1f       	adc	r17, r25
 3a0:	e8 01       	movw	r28, r16
 3a2:	c0 58       	subi	r28, 0x80	; 128
 3a4:	df 4f       	sbci	r29, 0xFF	; 255
 3a6:	0b 57       	subi	r16, 0x7B	; 123
 3a8:	1f 4f       	sbci	r17, 0xFF	; 255
 3aa:	fe 01       	movw	r30, r28
 3ac:	84 91       	lpm	r24, Z
 3ae:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 3b2:	21 96       	adiw	r28, 0x01	; 1
 3b4:	c0 17       	cp	r28, r16
 3b6:	d1 07       	cpc	r29, r17
 3b8:	c1 f7       	brne	.-16     	; 0x3aa <plot_char_normal+0x6c>
 3ba:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_stop>
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	08 95       	ret

000003c8 <plot_char_large>:
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	e8 2e       	mov	r14, r24
 3d6:	c6 2f       	mov	r28, r22
 3d8:	d4 2f       	mov	r29, r20
 3da:	88 e7       	ldi	r24, 0x78	; 120
 3dc:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_start>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 3e6:	81 e2       	ldi	r24, 0x21	; 33
 3e8:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 3ec:	8d 2f       	mov	r24, r29
 3ee:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 3f2:	8b e0       	ldi	r24, 0x0B	; 11
 3f4:	8d 0f       	add	r24, r29
 3f6:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 3fa:	82 e2       	ldi	r24, 0x22	; 34
 3fc:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 400:	8c 2f       	mov	r24, r28
 402:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	8c 0f       	add	r24, r28
 40a:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 40e:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_stop>
 412:	88 e7       	ldi	r24, 0x78	; 120
 414:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_start>
 418:	80 e4       	ldi	r24, 0x40	; 64
 41a:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 41e:	8e 2d       	mov	r24, r14
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	7c 01       	movw	r14, r24
 424:	ee 0c       	add	r14, r14
 426:	ff 1c       	adc	r15, r15
 428:	ee 0c       	add	r14, r14
 42a:	ff 1c       	adc	r15, r15
 42c:	8e 0d       	add	r24, r14
 42e:	9f 1d       	adc	r25, r15
 430:	8c 01       	movw	r16, r24
 432:	00 58       	subi	r16, 0x80	; 128
 434:	1f 4f       	sbci	r17, 0xFF	; 255
 436:	9c 01       	movw	r18, r24
 438:	2b 57       	subi	r18, 0x7B	; 123
 43a:	3f 4f       	sbci	r19, 0xFF	; 255
 43c:	79 01       	movw	r14, r18
 43e:	f8 01       	movw	r30, r16
 440:	84 91       	lpm	r24, Z
 442:	c8 2f       	mov	r28, r24
 444:	c0 7f       	andi	r28, 0xF0	; 240
 446:	f0 e1       	ldi	r31, 0x10	; 16
 448:	cf 9f       	mul	r28, r31
 44a:	e0 01       	movw	r28, r0
 44c:	11 24       	eor	r1, r1
 44e:	8f 70       	andi	r24, 0x0F	; 15
 450:	c8 2b       	or	r28, r24
 452:	ce 01       	movw	r24, r28
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	c8 2b       	or	r28, r24
 45e:	d9 2b       	or	r29, r25
 460:	c3 73       	andi	r28, 0x33	; 51
 462:	d3 73       	andi	r29, 0x33	; 51
 464:	ce 01       	movw	r24, r28
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	c8 2b       	or	r28, r24
 46c:	d9 2b       	or	r29, r25
 46e:	c5 75       	andi	r28, 0x55	; 85
 470:	d5 75       	andi	r29, 0x55	; 85
 472:	ce 01       	movw	r24, r28
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	c8 2b       	or	r28, r24
 47a:	d9 2b       	or	r29, r25
 47c:	8c 2f       	mov	r24, r28
 47e:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 482:	8d 2f       	mov	r24, r29
 484:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 488:	8c 2f       	mov	r24, r28
 48a:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 48e:	8d 2f       	mov	r24, r29
 490:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 494:	0f 5f       	subi	r16, 0xFF	; 255
 496:	1f 4f       	sbci	r17, 0xFF	; 255
 498:	0e 15       	cp	r16, r14
 49a:	1f 05       	cpc	r17, r15
 49c:	81 f6       	brne	.-96     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 49e:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_stop>
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	08 95       	ret

000004b0 <clear_display>:
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	88 e7       	ldi	r24, 0x78	; 120
 4b6:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_start>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4c0:	81 e2       	ldi	r24, 0x21	; 33
 4c2:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4cc:	8f e7       	ldi	r24, 0x7F	; 127
 4ce:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4d2:	82 e2       	ldi	r24, 0x22	; 34
 4d4:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4de:	87 e0       	ldi	r24, 0x07	; 7
 4e0:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4e4:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_stop>
 4e8:	d0 e2       	ldi	r29, 0x20	; 32
 4ea:	88 e7       	ldi	r24, 0x78	; 120
 4ec:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_start>
 4f0:	80 e4       	ldi	r24, 0x40	; 64
 4f2:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4f6:	c0 e2       	ldi	r28, 0x20	; 32
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 4fe:	c1 50       	subi	r28, 0x01	; 1
 500:	d9 f7       	brne	.-10     	; 0x4f8 <clear_display+0x48>
 502:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_stop>
 506:	d1 50       	subi	r29, 0x01	; 1
 508:	81 f7       	brne	.-32     	; 0x4ea <clear_display+0x3a>
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <set_start_line>:
 510:	cf 93       	push	r28
 512:	c8 2f       	mov	r28, r24
 514:	88 e7       	ldi	r24, 0x78	; 120
 516:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_start>
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 520:	8c 2f       	mov	r24, r28
 522:	88 0f       	add	r24, r24
 524:	88 0f       	add	r24, r24
 526:	88 0f       	add	r24, r24
 528:	80 5c       	subi	r24, 0xC0	; 192
 52a:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 52e:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_stop>
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <set_scale>:
 536:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 53a:	e8 2f       	mov	r30, r24
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	e0 50       	subi	r30, 0x00	; 0
 544:	ff 4f       	sbci	r31, 0xFF	; 255
 546:	80 81       	ld	r24, Z
 548:	91 81       	ldd	r25, Z+1	; 0x01
 54a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <plot_char+0x1>
 54e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <plot_char>
 552:	08 95       	ret

00000554 <init_display>:
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_init>
 560:	88 e7       	ldi	r24, 0x78	; 120
 562:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_start>
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 56c:	c8 e6       	ldi	r28, 0x68	; 104
 56e:	d0 e0       	ldi	r29, 0x00	; 0
 570:	00 e8       	ldi	r16, 0x80	; 128
 572:	10 e0       	ldi	r17, 0x00	; 0
 574:	fe 01       	movw	r30, r28
 576:	84 91       	lpm	r24, Z
 578:	0e 94 94 03 	call	0x728	; 0x728 <i2c_write>
 57c:	21 96       	adiw	r28, 0x01	; 1
 57e:	c0 17       	cp	r28, r16
 580:	d1 07       	cpc	r29, r17
 582:	c1 f7       	brne	.-16     	; 0x574 <init_display+0x20>
 584:	0e 94 a6 03 	call	0x74c	; 0x74c <i2c_stop>
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 9b 02 	call	0x536	; 0x536 <set_scale>
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	0e 94 88 02 	call	0x510	; 0x510 <set_start_line>
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	08 95       	ret

0000059e <plot_str>:
 59e:	cf 92       	push	r12
 5a0:	df 92       	push	r13
 5a2:	ef 92       	push	r14
 5a4:	ff 92       	push	r15
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	c6 2e       	mov	r12, r22
 5b0:	d2 2e       	mov	r13, r18
 5b2:	c4 2f       	mov	r28, r20
 5b4:	cc 0f       	add	r28, r28
 5b6:	4c 0f       	add	r20, r28
 5b8:	c4 2f       	mov	r28, r20
 5ba:	cc 0f       	add	r28, r28
 5bc:	21 11       	cpse	r18, r1
 5be:	1c c0       	rjmp	.+56     	; 0x5f8 <plot_str+0x5a>
 5c0:	dd 24       	eor	r13, r13
 5c2:	da 94       	dec	r13
 5c4:	19 c0       	rjmp	.+50     	; 0x5f8 <plot_str+0x5a>
 5c6:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <plot_char>
 5ca:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <plot_char+0x1>
 5ce:	4c 2f       	mov	r20, r28
 5d0:	6c 2d       	mov	r22, r12
 5d2:	09 95       	icall
 5d4:	c7 01       	movw	r24, r14
 5d6:	00 90 0e 01 	lds	r0, 0x010E	; 0x80010e <__data_end>
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <plot_str+0x42>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <plot_str+0x3e>
 5e4:	c8 0f       	add	r28, r24
 5e6:	df 5f       	subi	r29, 0xFF	; 255
 5e8:	dd 15       	cp	r29, r13
 5ea:	a0 f4       	brcc	.+40     	; 0x614 <plot_str+0x76>
 5ec:	f8 01       	movw	r30, r16
 5ee:	81 91       	ld	r24, Z+
 5f0:	8f 01       	movw	r16, r30
 5f2:	81 11       	cpse	r24, r1
 5f4:	e8 cf       	rjmp	.-48     	; 0x5c6 <plot_str+0x28>
 5f6:	0e c0       	rjmp	.+28     	; 0x614 <plot_str+0x76>
 5f8:	8c 01       	movw	r16, r24
 5fa:	0f 5f       	subi	r16, 0xFF	; 255
 5fc:	1f 4f       	sbci	r17, 0xFF	; 255
 5fe:	fc 01       	movw	r30, r24
 600:	80 81       	ld	r24, Z
 602:	88 23       	and	r24, r24
 604:	39 f0       	breq	.+14     	; 0x614 <plot_str+0x76>
 606:	d0 e0       	ldi	r29, 0x00	; 0
 608:	0f 2e       	mov	r0, r31
 60a:	f6 e0       	ldi	r31, 0x06	; 6
 60c:	ef 2e       	mov	r14, r31
 60e:	f1 2c       	mov	r15, r1
 610:	f0 2d       	mov	r31, r0
 612:	d9 cf       	rjmp	.-78     	; 0x5c6 <plot_str+0x28>
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	ff 90       	pop	r15
 61e:	ef 90       	pop	r14
 620:	df 90       	pop	r13
 622:	cf 90       	pop	r12
 624:	08 95       	ret

00000626 <plot_bin>:
 * @param col start column (0 - floor(DISPLAY_WIDTH/CHAR_WIDTH)-1)
 * @param digits maximum number of bits to expect (this number of characters' worth of
          space will be occupied on the display)
 */
void plot_bin(uint32_t num, uint8_t line, uint8_t col, uint8_t bits)
{
 626:	af 92       	push	r10
 628:	bf 92       	push	r11
 62a:	cf 92       	push	r12
 62c:	df 92       	push	r13
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	6b 01       	movw	r12, r22
 63a:	7c 01       	movw	r14, r24
 63c:	d4 2f       	mov	r29, r20
	uint8_t column = col * CHAR_WIDTH;
 63e:	c2 2f       	mov	r28, r18
 640:	cc 0f       	add	r28, r28
 642:	c2 0f       	add	r28, r18
 644:	cc 0f       	add	r28, r28
	
	plot_str("0b", line, column, 2);
 646:	22 e0       	ldi	r18, 0x02	; 2
 648:	4c 2f       	mov	r20, r28
 64a:	6d 2f       	mov	r22, r29
 64c:	84 e0       	ldi	r24, 0x04	; 4
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 cf 02 	call	0x59e	; 0x59e <plot_str>
	column += (CHAR_WIDTH << scale) * (bits + 2); // move to end and plot backwards
 654:	86 e0       	ldi	r24, 0x06	; 6
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	00 90 0e 01 	lds	r0, 0x010E	; 0x80010e <__data_end>
 65c:	02 c0       	rjmp	.+4      	; 0x662 <plot_bin+0x3c>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	0a 94       	dec	r0
 664:	e2 f7       	brpl	.-8      	; 0x65e <plot_bin+0x38>
 666:	92 e0       	ldi	r25, 0x02	; 2
 668:	90 0f       	add	r25, r16
 66a:	98 9f       	mul	r25, r24
 66c:	c0 0d       	add	r28, r0
 66e:	11 24       	eor	r1, r1
	
	uint8_t bit;
	for (uint8_t i = bits; i > 0; i--)
 670:	00 23       	and	r16, r16
 672:	39 f1       	breq	.+78     	; 0x6c2 <plot_bin+0x9c>
	{
		column -= (CHAR_WIDTH << scale);
 674:	0f 2e       	mov	r0, r31
 676:	f6 e0       	ldi	r31, 0x06	; 6
 678:	af 2e       	mov	r10, r31
 67a:	b1 2c       	mov	r11, r1
 67c:	f0 2d       	mov	r31, r0
 67e:	c5 01       	movw	r24, r10
 680:	00 90 0e 01 	lds	r0, 0x010E	; 0x80010e <__data_end>
 684:	02 c0       	rjmp	.+4      	; 0x68a <plot_bin+0x64>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	0a 94       	dec	r0
 68c:	e2 f7       	brpl	.-8      	; 0x686 <plot_bin+0x60>
 68e:	c8 1b       	sub	r28, r24
		bit = num & 0x00000001;
		
		if (bit) plot_char('1', line, column);
 690:	c0 fe       	sbrs	r12, 0
 692:	09 c0       	rjmp	.+18     	; 0x6a6 <plot_bin+0x80>
 694:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <plot_char>
 698:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <plot_char+0x1>
 69c:	4c 2f       	mov	r20, r28
 69e:	6d 2f       	mov	r22, r29
 6a0:	81 e3       	ldi	r24, 0x31	; 49
 6a2:	09 95       	icall
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <plot_bin+0x90>
		else	 plot_char('0', line, column);
 6a6:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <plot_char>
 6aa:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <plot_char+0x1>
 6ae:	4c 2f       	mov	r20, r28
 6b0:	6d 2f       	mov	r22, r29
 6b2:	80 e3       	ldi	r24, 0x30	; 48
 6b4:	09 95       	icall
		
		num >>= 1;
 6b6:	f6 94       	lsr	r15
 6b8:	e7 94       	ror	r14
 6ba:	d7 94       	ror	r13
 6bc:	c7 94       	ror	r12
	
	plot_str("0b", line, column, 2);
	column += (CHAR_WIDTH << scale) * (bits + 2); // move to end and plot backwards
	
	uint8_t bit;
	for (uint8_t i = bits; i > 0; i--)
 6be:	01 50       	subi	r16, 0x01	; 1
 6c0:	f1 f6       	brne	.-68     	; 0x67e <plot_bin+0x58>
		if (bit) plot_char('1', line, column);
		else	 plot_char('0', line, column);
		
		num >>= 1;
	}
}
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	0f 91       	pop	r16
 6c8:	ff 90       	pop	r15
 6ca:	ef 90       	pop	r14
 6cc:	df 90       	pop	r13
 6ce:	cf 90       	pop	r12
 6d0:	bf 90       	pop	r11
 6d2:	af 90       	pop	r10
 6d4:	08 95       	ret

000006d6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 6dc:	08 95       	ret

000006de <i2c_start>:
 6de:	ec eb       	ldi	r30, 0xBC	; 188
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	10 82       	st	Z, r1
 6e4:	94 ea       	ldi	r25, 0xA4	; 164
 6e6:	90 83       	st	Z, r25
 6e8:	90 81       	ld	r25, Z
 6ea:	99 23       	and	r25, r25
 6ec:	ec f7       	brge	.-6      	; 0x6e8 <i2c_start+0xa>
 6ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 6f2:	98 7f       	andi	r25, 0xF8	; 248
 6f4:	98 30       	cpi	r25, 0x08	; 8
 6f6:	a1 f4       	brne	.+40     	; 0x720 <i2c_start+0x42>
 6f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 6fc:	84 e8       	ldi	r24, 0x84	; 132
 6fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 702:	ec eb       	ldi	r30, 0xBC	; 188
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	88 23       	and	r24, r24
 70a:	ec f7       	brge	.-6      	; 0x706 <i2c_start+0x28>
 70c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 710:	98 7f       	andi	r25, 0xF8	; 248
 712:	98 31       	cpi	r25, 0x18	; 24
 714:	39 f0       	breq	.+14     	; 0x724 <i2c_start+0x46>
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 34       	cpi	r25, 0x40	; 64
 71a:	29 f4       	brne	.+10     	; 0x726 <i2c_start+0x48>
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	08 95       	ret
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	08 95       	ret
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret

00000728 <i2c_write>:
 728:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 72c:	84 e8       	ldi	r24, 0x84	; 132
 72e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 732:	ec eb       	ldi	r30, 0xBC	; 188
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	88 23       	and	r24, r24
 73a:	ec f7       	brge	.-6      	; 0x736 <i2c_write+0xe>
 73c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 740:	98 7f       	andi	r25, 0xF8	; 248
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	98 32       	cpi	r25, 0x28	; 40
 746:	09 f4       	brne	.+2      	; 0x74a <i2c_write+0x22>
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	08 95       	ret

0000074c <i2c_stop>:

void i2c_stop()
{
	// transmit STOP condition
	TWCR = 1<<TWINT | 1<<TWEN | 1<<TWSTO;
 74c:	84 e9       	ldi	r24, 0x94	; 148
 74e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 752:	08 95       	ret

00000754 <main>:

#include "ssd1306.h"

int main(void)
{
    init_display();
 754:	0e 94 aa 02 	call	0x554	; 0x554 <init_display>
	clear_display();
 758:	0e 94 58 02 	call	0x4b0	; 0x4b0 <clear_display>
	
	set_scale(NORMAL);
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	0e 94 9b 02 	call	0x536	; 0x536 <set_scale>
	plot_str("abc", 0, 0, 3);
 762:	23 e0       	ldi	r18, 0x03	; 3
 764:	40 e0       	ldi	r20, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	8a e0       	ldi	r24, 0x0A	; 10
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	0e 94 cf 02 	call	0x59e	; 0x59e <plot_str>
	set_scale(LARGE);
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0e 94 9b 02 	call	0x536	; 0x536 <set_scale>
	plot_bin(0xAB, 2, 0, 8);
 776:	08 e0       	ldi	r16, 0x08	; 8
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	42 e0       	ldi	r20, 0x02	; 2
 77c:	6b ea       	ldi	r22, 0xAB	; 171
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 13 03 	call	0x626	; 0x626 <plot_bin>
 788:	ff cf       	rjmp	.-2      	; 0x788 <main+0x34>

0000078a <_exit>:
 78a:	f8 94       	cli

0000078c <__stop_program>:
 78c:	ff cf       	rjmp	.-2      	; 0x78c <__stop_program>
